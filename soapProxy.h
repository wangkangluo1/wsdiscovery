/* soapProxy.h
   Generated by gSOAP 2.8.1 from ns_ProbeOp.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef soapServiceProxy_H
#define soapServiceProxy_H
#include "soapH.h"
class Service
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'Service' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	Service()
	{ soap = soap_new(); endpoint = "http://localhost:80"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"wsa", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL, NULL},
	{"d", "http://tempuri.org/d.xsd", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~Service() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'Probe' of service 'Service' and return error code (or SOAP_OK)
	virtual int d__Probe(char *d__Types, char *d__Scopes) { return soap ? soap_send_d__Probe(soap, endpoint, NULL, d__Types, d__Scopes) : SOAP_EOM; };
	/// Invoke 'ProbeMatches' of service 'Service' and return error code (or SOAP_OK)
	virtual int d__ProbeMatches(struct d__ProbeMatchType *d__ProbeMatch) { return soap ? soap_send_d__ProbeMatches(soap, endpoint, NULL, d__ProbeMatch) : SOAP_EOM; };
};
#endif
